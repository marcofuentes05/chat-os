// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: petition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_petition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_petition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_petition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_petition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_petition_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_petition_2eproto_metadata_getter(int index);
namespace chat {
class ClientPetition;
struct ClientPetitionDefaultTypeInternal;
extern ClientPetitionDefaultTypeInternal _ClientPetition_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ClientPetition* Arena::CreateMaybeMessage<::chat::ClientPetition>(Arena*);
template<> ::chat::ServerResponse* Arena::CreateMaybeMessage<::chat::ServerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class ClientPetition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ClientPetition) */ {
 public:
  inline ClientPetition() : ClientPetition(nullptr) {}
  virtual ~ClientPetition();
  explicit constexpr ClientPetition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPetition(const ClientPetition& from);
  ClientPetition(ClientPetition&& from) noexcept
    : ClientPetition() {
    *this = ::std::move(from);
  }

  inline ClientPetition& operator=(const ClientPetition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPetition& operator=(ClientPetition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPetition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPetition* internal_default_instance() {
    return reinterpret_cast<const ClientPetition*>(
               &_ClientPetition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientPetition& a, ClientPetition& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPetition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPetition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientPetition* New() const final {
    return CreateMaybeMessage<ClientPetition>(nullptr);
  }

  ClientPetition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPetition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPetition& from);
  void MergeFrom(const ClientPetition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPetition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ClientPetition";
  }
  protected:
  explicit ClientPetition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_petition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIpFieldNumber = 3,
    kMessageFieldNumber = 6,
    kSentToFieldNumber = 7,
    kNewStatusFieldNumber = 8,
    kOptionFieldNumber = 1,
  };
  // string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string message = 6;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string sent_to = 7;
  bool has_sent_to() const;
  private:
  bool _internal_has_sent_to() const;
  public:
  void clear_sent_to();
  const std::string& sent_to() const;
  void set_sent_to(const std::string& value);
  void set_sent_to(std::string&& value);
  void set_sent_to(const char* value);
  void set_sent_to(const char* value, size_t size);
  std::string* mutable_sent_to();
  std::string* release_sent_to();
  void set_allocated_sent_to(std::string* sent_to);
  private:
  const std::string& _internal_sent_to() const;
  void _internal_set_sent_to(const std::string& value);
  std::string* _internal_mutable_sent_to();
  public:

  // string new_status = 8;
  bool has_new_status() const;
  private:
  bool _internal_has_new_status() const;
  public:
  void clear_new_status();
  const std::string& new_status() const;
  void set_new_status(const std::string& value);
  void set_new_status(std::string&& value);
  void set_new_status(const char* value);
  void set_new_status(const char* value, size_t size);
  std::string* mutable_new_status();
  std::string* release_new_status();
  void set_allocated_new_status(std::string* new_status);
  private:
  const std::string& _internal_new_status() const;
  void _internal_set_new_status(const std::string& value);
  std::string* _internal_mutable_new_status();
  public:

  // int32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_option() const;
  void _internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ClientPetition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sent_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  friend struct ::TableStruct_petition_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  virtual ~ServerResponse();
  explicit constexpr ServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(nullptr);
  }

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ServerResponse";
  }
  protected:
  explicit ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_petition_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerMessageFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kUserMessageFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string server_message = 2;
  bool has_server_message() const;
  private:
  bool _internal_has_server_message() const;
  public:
  void clear_server_message();
  const std::string& server_message() const;
  void set_server_message(const std::string& value);
  void set_server_message(std::string&& value);
  void set_server_message(const char* value);
  void set_server_message(const char* value, size_t size);
  std::string* mutable_server_message();
  std::string* release_server_message();
  void set_allocated_server_message(std::string* server_message);
  private:
  const std::string& _internal_server_message() const;
  void _internal_set_server_message(const std::string& value);
  std::string* _internal_mutable_server_message();
  public:

  // string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string user_message = 4;
  bool has_user_message() const;
  private:
  bool _internal_has_user_message() const;
  public:
  void clear_user_message();
  const std::string& user_message() const;
  void set_user_message(const std::string& value);
  void set_user_message(std::string&& value);
  void set_user_message(const char* value);
  void set_user_message(const char* value, size_t size);
  std::string* mutable_user_message();
  std::string* release_user_message();
  void set_allocated_user_message(std::string* user_message);
  private:
  const std::string& _internal_user_message() const;
  void _internal_set_user_message(const std::string& value);
  std::string* _internal_mutable_user_message();
  public:

  // int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  friend struct ::TableStruct_petition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPetition

// int32 option = 1;
inline bool ClientPetition::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClientPetition::has_option() const {
  return _internal_has_option();
}
inline void ClientPetition::clear_option() {
  option_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPetition::_internal_option() const {
  return option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPetition::option() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.option)
  return _internal_option();
}
inline void ClientPetition::_internal_set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  option_ = value;
}
inline void ClientPetition::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.option)
}

// string username = 2;
inline bool ClientPetition::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientPetition::has_username() const {
  return _internal_has_username();
}
inline void ClientPetition::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientPetition::username() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.username)
  return _internal_username();
}
inline void ClientPetition::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.username)
}
inline std::string* ClientPetition::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.username)
  return _internal_mutable_username();
}
inline const std::string& ClientPetition::_internal_username() const {
  return username_.Get();
}
inline void ClientPetition::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientPetition::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientPetition.username)
}
inline void ClientPetition::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ClientPetition.username)
}
inline void ClientPetition::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientPetition.username)
}
inline std::string* ClientPetition::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientPetition::release_username() {
  // @@protoc_insertion_point(field_release:chat.ClientPetition.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientPetition::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.username)
}

// string ip = 3;
inline bool ClientPetition::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientPetition::has_ip() const {
  return _internal_has_ip();
}
inline void ClientPetition::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientPetition::ip() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.ip)
  return _internal_ip();
}
inline void ClientPetition::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.ip)
}
inline std::string* ClientPetition::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.ip)
  return _internal_mutable_ip();
}
inline const std::string& ClientPetition::_internal_ip() const {
  return ip_.Get();
}
inline void ClientPetition::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientPetition::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientPetition.ip)
}
inline void ClientPetition::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ClientPetition.ip)
}
inline void ClientPetition::set_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientPetition.ip)
}
inline std::string* ClientPetition::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientPetition::release_ip() {
  // @@protoc_insertion_point(field_release:chat.ClientPetition.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientPetition::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.ip)
}

// string message = 6;
inline bool ClientPetition::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientPetition::has_message() const {
  return _internal_has_message();
}
inline void ClientPetition::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientPetition::message() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.message)
  return _internal_message();
}
inline void ClientPetition::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.message)
}
inline std::string* ClientPetition::mutable_message() {
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.message)
  return _internal_mutable_message();
}
inline const std::string& ClientPetition::_internal_message() const {
  return message_.Get();
}
inline void ClientPetition::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientPetition::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientPetition.message)
}
inline void ClientPetition::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ClientPetition.message)
}
inline void ClientPetition::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientPetition.message)
}
inline std::string* ClientPetition::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientPetition::release_message() {
  // @@protoc_insertion_point(field_release:chat.ClientPetition.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientPetition::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.message)
}

// string sent_to = 7;
inline bool ClientPetition::_internal_has_sent_to() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientPetition::has_sent_to() const {
  return _internal_has_sent_to();
}
inline void ClientPetition::clear_sent_to() {
  sent_to_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientPetition::sent_to() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.sent_to)
  return _internal_sent_to();
}
inline void ClientPetition::set_sent_to(const std::string& value) {
  _internal_set_sent_to(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.sent_to)
}
inline std::string* ClientPetition::mutable_sent_to() {
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.sent_to)
  return _internal_mutable_sent_to();
}
inline const std::string& ClientPetition::_internal_sent_to() const {
  return sent_to_.Get();
}
inline void ClientPetition::_internal_set_sent_to(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sent_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientPetition::set_sent_to(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sent_to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientPetition.sent_to)
}
inline void ClientPetition::set_sent_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sent_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ClientPetition.sent_to)
}
inline void ClientPetition::set_sent_to(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sent_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientPetition.sent_to)
}
inline std::string* ClientPetition::_internal_mutable_sent_to() {
  _has_bits_[0] |= 0x00000008u;
  return sent_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientPetition::release_sent_to() {
  // @@protoc_insertion_point(field_release:chat.ClientPetition.sent_to)
  if (!_internal_has_sent_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sent_to_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientPetition::set_allocated_sent_to(std::string* sent_to) {
  if (sent_to != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sent_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sent_to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.sent_to)
}

// string new_status = 8;
inline bool ClientPetition::_internal_has_new_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClientPetition::has_new_status() const {
  return _internal_has_new_status();
}
inline void ClientPetition::clear_new_status() {
  new_status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientPetition::new_status() const {
  // @@protoc_insertion_point(field_get:chat.ClientPetition.new_status)
  return _internal_new_status();
}
inline void ClientPetition::set_new_status(const std::string& value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:chat.ClientPetition.new_status)
}
inline std::string* ClientPetition::mutable_new_status() {
  // @@protoc_insertion_point(field_mutable:chat.ClientPetition.new_status)
  return _internal_mutable_new_status();
}
inline const std::string& ClientPetition::_internal_new_status() const {
  return new_status_.Get();
}
inline void ClientPetition::_internal_set_new_status(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  new_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientPetition::set_new_status(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  new_status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ClientPetition.new_status)
}
inline void ClientPetition::set_new_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  new_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ClientPetition.new_status)
}
inline void ClientPetition::set_new_status(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  new_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ClientPetition.new_status)
}
inline std::string* ClientPetition::_internal_mutable_new_status() {
  _has_bits_[0] |= 0x00000010u;
  return new_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientPetition::release_new_status() {
  // @@protoc_insertion_point(field_release:chat.ClientPetition.new_status)
  if (!_internal_has_new_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return new_status_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientPetition::set_allocated_new_status(std::string* new_status) {
  if (new_status != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  new_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ClientPetition.new_status)
}

// -------------------------------------------------------------------

// ServerResponse

// int32 code = 1;
inline bool ServerResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerResponse::has_code() const {
  return _internal_has_code();
}
inline void ServerResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponse::code() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.code)
  return _internal_code();
}
inline void ServerResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  code_ = value;
}
inline void ServerResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.code)
}

// string server_message = 2;
inline bool ServerResponse::_internal_has_server_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerResponse::has_server_message() const {
  return _internal_has_server_message();
}
inline void ServerResponse::clear_server_message() {
  server_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerResponse::server_message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.server_message)
  return _internal_server_message();
}
inline void ServerResponse::set_server_message(const std::string& value) {
  _internal_set_server_message(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.server_message)
}
inline std::string* ServerResponse::mutable_server_message() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.server_message)
  return _internal_mutable_server_message();
}
inline const std::string& ServerResponse::_internal_server_message() const {
  return server_message_.Get();
}
inline void ServerResponse::_internal_set_server_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerResponse::set_server_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ServerResponse.server_message)
}
inline void ServerResponse::set_server_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ServerResponse.server_message)
}
inline void ServerResponse::set_server_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ServerResponse.server_message)
}
inline std::string* ServerResponse::_internal_mutable_server_message() {
  _has_bits_[0] |= 0x00000001u;
  return server_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerResponse::release_server_message() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.server_message)
  if (!_internal_has_server_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponse::set_allocated_server_message(std::string* server_message) {
  if (server_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.server_message)
}

// string username = 3;
inline bool ServerResponse::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerResponse::has_username() const {
  return _internal_has_username();
}
inline void ServerResponse::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerResponse::username() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.username)
  return _internal_username();
}
inline void ServerResponse::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.username)
}
inline std::string* ServerResponse::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.username)
  return _internal_mutable_username();
}
inline const std::string& ServerResponse::_internal_username() const {
  return username_.Get();
}
inline void ServerResponse::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerResponse::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ServerResponse.username)
}
inline void ServerResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ServerResponse.username)
}
inline void ServerResponse::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ServerResponse.username)
}
inline std::string* ServerResponse::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerResponse::release_username() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.username)
}

// string user_message = 4;
inline bool ServerResponse::_internal_has_user_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerResponse::has_user_message() const {
  return _internal_has_user_message();
}
inline void ServerResponse::clear_user_message() {
  user_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServerResponse::user_message() const {
  // @@protoc_insertion_point(field_get:chat.ServerResponse.user_message)
  return _internal_user_message();
}
inline void ServerResponse::set_user_message(const std::string& value) {
  _internal_set_user_message(value);
  // @@protoc_insertion_point(field_set:chat.ServerResponse.user_message)
}
inline std::string* ServerResponse::mutable_user_message() {
  // @@protoc_insertion_point(field_mutable:chat.ServerResponse.user_message)
  return _internal_mutable_user_message();
}
inline const std::string& ServerResponse::_internal_user_message() const {
  return user_message_.Get();
}
inline void ServerResponse::_internal_set_user_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerResponse::set_user_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.ServerResponse.user_message)
}
inline void ServerResponse::set_user_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:chat.ServerResponse.user_message)
}
inline void ServerResponse::set_user_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.ServerResponse.user_message)
}
inline std::string* ServerResponse::_internal_mutable_user_message() {
  _has_bits_[0] |= 0x00000004u;
  return user_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerResponse::release_user_message() {
  // @@protoc_insertion_point(field_release:chat.ServerResponse.user_message)
  if (!_internal_has_user_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponse::set_allocated_user_message(std::string* user_message) {
  if (user_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.ServerResponse.user_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_petition_2eproto
